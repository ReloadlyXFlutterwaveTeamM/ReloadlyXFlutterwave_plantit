/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim, skipWaiting } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL, matchPrecache } from 'workbox-precaching';
import { registerRoute, setDefaultHandler, setCatchHandler } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst, NetworkOnly } from 'workbox-strategies';

const revision = 2;
const preCacheList = [
  '/manifest.json',
  '/assets/icons/16x16.png',
  '/assets/icons/32x32.png',
  '/assets/icons/192x192.png',
  '/assets/icons/512x512.png',
  '/assets/icons/favicon.ico',
  '/assets/icons/apple-touch-icon.png',
  '/assets/images/airtime_topups.png',
  '/assets/images/data_bundles.png',
  '/assets/images/gardening_bro.png',
  '/assets/images/gift_cards.png',
  '/assets/images/redeem_bg.png',
  '/assets/images/smart_green.png',
  '/assets/logos/flutterwave_logo.png',
  '/assets/logos/plantit_black.png',
  '/assets/logos/plantit_green.png',
  '/assets/logos/plantit_sm_black.png',
  '/assets/logos/plantit_sm_green.png',
  '/assets/logos/plantit_white.png',
  '/assets/logos/reloadly_logo.png',
].map((url) => ({ url, revision }));

skipWaiting();
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);
precacheAndRoute(preCacheList);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(`${process.env.PUBLIC_URL}/index.html`),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: 'APP_IMAGES',
    plugins: [new ExpirationPlugin({ maxEntries: 50 })],
  }),
);

registerRoute(
  ({ request }) => request.headers.get('Accept').indexOf('application/json') !== -1,
  new NetworkFirst({
    cacheName: 'APP_JSON',
    plugins: [new ExpirationPlugin({ maxEntries: 500 })],
  }),
  'GET',
);

registerRoute(
  ({ request }) => request.headers.get('Accept').indexOf('application/pdf') !== -1,
  new StaleWhileRevalidate({
    cacheName: 'APP_PDFS',
    plugins: [new ExpirationPlugin({ maxEntries: 50 })],
  }),
);

const networkOnly = new NetworkOnly();

const postDeleteHandler = async (params) => {
  try {
    return await networkOnly.handle(params);
  } catch (error) {
    return caches.match('/assets/offline/post-json.json');
  }
};

registerRoute(
  ({ request }) => ['POST', 'DELETE'].indexOf(request.method) !== -1,
  postDeleteHandler,
);

setDefaultHandler(new StaleWhileRevalidate());

// Catch routing errors, like if the user is offline
setCatchHandler(async ({ event }) => {
  // Return the precached offline page if a document is being requested
  if (event.request.destination === 'document') {
    return matchPrecache('/assets/offline/offline.html');
  }

  return Response.error();
});
